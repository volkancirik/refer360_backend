# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2019-01-23 19:09
from __future__ import unicode_literals

from django.db import migrations
import random
from django.utils import timezone
from collections import defaultdict


def create_initial_annotations(apps, schema_editor):
  Image = apps.get_model('catalog', 'Image')

  # image_list = ['https://s3.amazonaws.com/refer360javascript/pano_test/pano_akojetqaokgbhk.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_atikcwhwilslkl.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_azqpvcqkquhudq.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aawdbuzwzzrawh.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aaxvnhjliovthm.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aazeapuonsyxtu.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_abxistpswtfzxt.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_abygqfgtevczqh.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_acbzqsuaxwftyh.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_acefcmtiqyunbh.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_acufcxxqnprpna.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_adrbvujzkxkfsq.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_afakdbuhiqzrsc.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aflbsdgtzxgjgi.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_agcfwusegghyaw.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_azqpvcqkquhudq.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aamftnivhiesay.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aapcyahhkcfvkc.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_aflbsdgtzxgjgi.jpg',
  #               'https://s3.amazonaws.com/refer360javascript/pano_test/pano_agcipzbgtgisoi.jpg']

  count_category = defaultdict(int)
  categories = [line.strip() for line in open(
      "/projects1/refer_backend/refer360annotation/CATEGORIES.indoor.pilot1")]

  image_list = ['s3://refer360/sun360images_4552x2276/pano_acufcxxqnprpna_tent.jpg',
                's3://refer360/sun360images_4552x2276/pano_abygqfgtevczqh_gym.jpg',
                's3://refer360/sun360images_4552x2276/pano_agcfwusegghyaw_gym.jpg',
                # 's3://refer360/sun360images_4552x2276/pano_acefcmtiqyunbh_lobby_atrium.jpg',
                # 's3://refer360/sun360images_4552x2276/pano_afakdbuhiqzrsc_airplane_interior.jpg',
                ]
  for line in open("/projects1/refer_backend/refer360annotation/imagelist.indoor.noothers.4552x2276"):
    image_link = line.strip()
    flag = False
    for category in categories:
      if category in image_link and count_category[category] < 20:
        flag = True
        count_category[category] += 1
    if flag:
      image_list.append(image_link)

  print(">>>", len(image_list))
  images = []

  Turker = apps.get_model('catalog', 'Turker')
  turker = Turker(turkerid="onboarding",
                  date=timezone.now())
  turker.save()

  for imageurl in image_list:
    image = Image(imageurl=imageurl.replace("s3://", "https://s3.amazonaws.com/"),
                  date=timezone.now())
    image.save()
    images.append(image)

  refexps = ["|||Find the screen with the projected image showing trees|||When you face the screen, there is a group of black armchairs to your right|||When you turn to face the armchairs, you can see a water bottle on the floor by the rightmost armchair|||Waldo is on that bottle",
             "|||Find the wall with the windows on it.|||Look towards the blue and white wall to the right of it.|||Look at the beam on the ceiling closest to that wall.|||Waldo is where that beam meets the third flourescent light from the wall with the windows.",
             "|||First, find the two treadmills in front of the mirror.|||To the right of the treadmills, there is a painting with a red heart in it hanging on the wall.|||Waldo is immediately to the right of the painting, on the wall.",
             "|||Find the fire extinguisher in one of the corners by the arch|||There are three paintings on the wall adjacent to the extinguisher|||Waldo is on the leftmost painting of the three, farthest from the extinguisher",
             "|||Look at the man in the white shirt standing the aisle.|||Turn to your left so you're looking at the window.|||Look up at the overhead bin above it.|||Waldo is on the bedding in the bin."]
  latitudes = [-0.38391896424356176,
               0.19571792831801402,
               0.07021852058890396,
               -0.08017862422324176,
               0.5370215311553067]
  longitudes = [1.7548839557717029,
                2.3537064789218314,
                6.236979732691076,
                0.2559327388451719,
                4.953184536534591]

  image_ids = [image_list.index(
      "s3://refer360/sun360images_4552x2276/pano_acufcxxqnprpna_tent.jpg"),
      image_list.index(
      "s3://refer360/sun360images_4552x2276/pano_abygqfgtevczqh_gym.jpg"),
      image_list.index(
      "s3://refer360/sun360images_4552x2276/pano_agcfwusegghyaw_gym.jpg"),
      # image_list.index(
      # "s3://refer360/sun360images_4552x2276/pano_acefcmtiqyunbh_lobby_atrium.jpg"),
      # image_list.index(
      # "s3://refer360/sun360images_4552x2276/pano_afakdbuhiqzrsc_airplane_interior.jpg")
  ]
  Feedback = apps.get_model('catalog', 'Feedback')
  Annotation = apps.get_model('catalog', 'Annotation')
  feedback = Feedback(feedback_text='feedbackonboarding',
                      feedback_detail="feedbackidonboarding text", date=timezone.now(),
                      validation=-1)
  feedback.save()

  n_onboarding = 3
  n_onboarding = min(n_onboarding, len(refexps))
  for ii in range(n_onboarding):
    refexp = refexps[ii]
    latitude = latitudes[ii]
    longitude = longitudes[ii]
    image = images[image_ids[ii]]
    annotation = Annotation(refexp=refexp,
                            latitude=latitude,
                            longitude=longitude,
                            image=image,
                            turker=turker,
                            feedback=feedback,
                            date=timezone.now()
                            )
    annotation.save()

  # n_turkers = 4
  # Turker = apps.get_model('catalog', 'Turker')
  # Feedback = apps.get_model('catalog', 'Feedback')
  # Annotation = apps.get_model('catalog', 'Annotation')
  # Actions = apps.get_model('catalog', 'Actions')

  # turkers = []
  # feedbacks = []
  # actions = []
  # annotations = []
  # for t in range(n_turkers):
  #   turker = Turker(turkerid="turker" + str(t+1),
  #                   date=timezone.now())
  #   turker.save()
  #   turkers.append(turker)

  #   feedback = Feedback(feedback_text='feedbackid' + str(t+1),
  #                       feedback_detail="feedback_detail" + str(t+1), date=timezone.now())
  #   feedback.save()
  #   feedbacks.append(feedback)
  #   feedback = Feedback(feedback_text='feedbackid' + str(t+1 + n_turkers),
  #                       feedback_detail="feedback_detail" + str(t+1 + n_turkers), date=timezone.now())
  #   feedback.save()
  #   feedbacks.append(feedback)

  #   feedback = Feedback(feedback_text='feedbackid' + str(t+1 + n_turkers*2),
  #                       feedback_detail="feedback_detail" + str(t+1 + n_turkers*2), date=timezone.now())
  #   feedback.save()
  #   feedbacks.append(feedback)

  #   annotation = Annotation(refexp="|||refexp" + str(t+1) + '|||refexp_second',
  #                           latitude=0.01 + t,
  #                           longitude=0.2 + t,
  #                           image=images[t],
  #                           turker=turkers[t],
  #                           feedback=feedbacks[t],
  #                           date=timezone.now()
  #                           )
  #   annotation.save()
  #   annotations.append(annotation)

  # counter = 0

  # pairs = set()
  # random.seed(0)
  # for t in range(n_turkers + n_turkers/2):

  #   while True:
  #     turker_idx = random.choice(list(range(n_turkers)))
  #     annotation_list = list(range(n_turkers))
  #     annotation_list.remove(turker_idx)
  #     annotation_idx = random.choice(annotation_list)
  #     if (turker_idx, annotation_idx) not in pairs:
  #       pairs.add(((turker_idx, annotation_idx)))
  #       break

  #   action = Actions(action_list="|0,0|0," + str(t),
  #                    pred_latitude=99 + t,
  #                    pred_longitude=999 + t,
  #                    start_latitude=88 + t,
  #                    start_longitude=888 + t,
  #                    turker=turkers[turker_idx],
  #                    annotation=annotations[annotation_idx],
  #                    feedback=feedbacks[t + n_turkers],
  #                    date=timezone.now())
  #   action.save()
  #   actions.append(action)


class Migration(migrations.Migration):

  dependencies = [
      ('catalog', '0001_initial'),
  ]

  operations = [
      migrations.RunPython(create_initial_annotations),

  ]
